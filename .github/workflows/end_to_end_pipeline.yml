# Arquivo: .github/workflows/end_to_end_pipeline.yml

name: End-to-End Data Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    outputs:
      databricks_job_id: ${{ steps.tf_output.outputs.job_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: terraform init
      - name: Terraform Apply
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: terraform apply -auto-approve

      - name: Capture Terraform Output
        id: tf_output
        run: echo "job_id=$(terraform output -raw databricks_job_id)" >> $GITHUB_OUTPUT


  run_pipeline_bronze:
    runs-on: ubuntu-latest
    needs: deploy_infrastructure
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
      - name: Run Bronze Layer Job on Databricks
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          JOB_ID_FROM_TF: ${{ needs.deploy_infrastructure.outputs.databricks_job_id }}
        run: |
          echo "Job ID received from Terraform: $JOB_ID_FROM_TF"

          echo "Starting Databricks job run..."
          # MUDANÃ‡A: Usa o ID diretamente, sem precisar procurar pelo nome
          RUN_ID=$(databricks jobs run-now $JOB_ID_FROM_TF | jq .run_id)
          
          if [ -z "$RUN_ID" ]; then
            echo "Failed to start job run."
            exit 1
          fi
          echo "Job started with run_id: $RUN_ID"
          
          # Loop de espera (continua o mesmo)
          while true; do
            STATUS=$(databricks jobs get-run $RUN_ID | jq -r .state.life_cycle_state)
            echo "Current job status: $STATUS"
            if [[ "$STATUS" == "TERMINATED" || "$STATUS" == "SKIPPED" ]]; then
              RESULT_STATE=$(databricks jobs get-run --run-id $RUN_ID | jq -r .state.result_state)
              if [[ "$RESULT_STATE" == "SUCCESS" ]]; then
                echo "Job completed successfully."
                break
              else
                echo "Job failed with result state: $RESULT_STATE"
                exit 1
              fi
            elif [[ "$STATUS" == "INTERNAL_ERROR" || "$STATUS" == "CANCELED" ]]; then
              echo "Job failed with life cycle state: $STATUS"
              exit 1
            fi
            sleep 10
          done

      - name: Run dbt build (Silver and Gold Layers)
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          DBT_CATALOG: "workspace"
          DBT_SCHEMA: "case_ifood"
        run: |
          cd dbt_project
          dbt deps
          dbt build
  
  run_pipeline_dbt:
    runs-on: ubuntu-latest
    needs: run_pipeline_bronze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dbt packages
        run: pip install dbt-core dbt-databricks dbt-utils
        
      - name: Run dbt build (Silver and Gold Layers)
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          DBT_CATALOG: "workspace"
          DBT_SCHEMA: "case_ifood"
        run: |
          cd dbt_project
          dbt deps
          dbt build