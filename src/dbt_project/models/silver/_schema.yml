version: 2

models:
  - name: silver # O nome do modelo .sql
    description: "Tabela de corridas de táxi limpa, tipada e validada. Esta tabela serve como a fonte única da verdade para todas as análises de negócio. Dados inválidos ou inconsistentes da camada bronze foram removidos ou corrigidos."
    columns:
      - name: trip_id # Adicionamos uma chave primária
        data_type: string
        description: "Chave primária surrogate gerada para identificar unicamente cada corrida."
        tests:
          - unique
          - not_null

      - name: vendor_id
        data_type: integer
        description: "Código que indica o provedor. 1=Creative Mobile, 2=Curb Mobility, etc. "
        tests:
          - not_null
          - accepted_values:
              arguments:
                values: [1, 2, 6, 7]

      - name: pickup_date 
        data_type: date
        description: "Data do início da corrida. Coluna para particionamento"
        tests:
          - not_null

      - name: tpep_pickup_datetime
        data_type: timestamp
        description: "Data e hora do início da corrida. "
        tests:
          - not_null

      - name: tpep_dropoff_datetime
        data_type: timestamp
        description: "Data e hora do fim da corrida. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= tpep_pickup_datetime" # Garante que a corrida não termina antes de começar

      - name: passenger_count
        data_type: integer
        description: "O número de passageiros no veículo. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0" # Passageiros não pode ser negativo

      - name: trip_distance
        data_type: double
        description: "A distância da viagem em milhas. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0" # Distância não pode ser negativa

      - name: rate_code_id
        data_type: integer
        description: "O código da tarifa final da viagem. 1=Standard, 2=JFK, etc. "
        tests:
          - not_null
          - accepted_values:
              arguments:
                values: [1, 2, 3, 4, 5, 6, 99]

      - name: store_and_fwd_flag
        data_type: string
        description: "Indicador de 'armazenar e encaminhar'. Y=Sim, N=Não. "
        tests:
          - not_null
          - accepted_values:
              arguments:
                values: ['Y', 'N']

      - name: pu_location_id
        data_type: integer
        description: "ID da Zona de Táxi de embarque (pickup). "
        tests:
          - not_null

      - name: do_location_id
        data_type: integer
        description: "ID da Zona de Táxi de desembarque (dropoff). "
        tests:
          - not_null

      - name: payment_type
        data_type: integer
        description: "Método de pagamento. 1=Cartão, 2=Dinheiro, etc. "
        tests:
          - not_null
          - accepted_values:
              arguments:
                values: [0, 1, 2, 3, 4, 5, 6]

      - name: fare_amount
        data_type: double
        description: "A tarifa de tempo e distância calculada pelo taxímetro. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"

      - name: extra
        data_type: double
        description: "Extras e sobretaxas diversas. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"

      - name: mta_tax
        data_type: double
        description: "Imposto MTA. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"

      - name: tip_amount
        data_type: double
        description: "Valor da gorjeta (para pagamentos com cartão). "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"

      - name: tolls_amount
        data_type: double
        description: "Valor total de todos os pedágios. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"

      - name: improvement_surcharge
        data_type: double
        description: "Sobretaxa de melhoria. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"

      - name: total_amount
        data_type: double
        description: "O valor total cobrado dos passageiros. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0" # A amostra mostra valores negativos que devem ser tratados

      - name: congestion_surcharge
        data_type: double
        description: "Sobretaxa de congestionamento. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"

      - name: airport_fee
        data_type: double
        description: "Taxa de aeroporto para embarques em LGA e JFK. "
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"